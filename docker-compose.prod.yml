version: '3.8'

services:
  # Service PHP/Apache pour la production
  app:
    build: .
    container_name: ecoride-app-prod
    ports:
      - "80:80"
    volumes:
      - ./uploads:/var/www/html/uploads
      - ./cache:/var/www/html/cache
      - ./logs:/var/www/html/logs
    depends_on:
      - db
    environment:
      - DB_HOST=db
      - DB_NAME=${DB_NAME}
      - DB_USER=${DB_USER}
      - DB_PASSWORD=${DB_PASSWORD}
      - APP_DEBUG=false
      - APP_URL=${APP_URL}
    networks:
      - ecoride-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Service MySQL pour la production
  db:
    image: mysql:8.0
    container_name: ecoride-db-prod
    environment:
      MYSQL_ROOT_PASSWORD: ${MYSQL_ROOT_PASSWORD}
      MYSQL_DATABASE: ${DB_NAME}
      MYSQL_USER: ${DB_USER}
      MYSQL_PASSWORD: ${DB_PASSWORD}
    volumes:
      - mysql_data:/var/lib/mysql
      - ./datas/ecoride.sql:/docker-entrypoint-initdb.d/ecoride.sql
    networks:
      - ecoride-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "localhost"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Service Nginx pour le reverse proxy (optionnel)
  nginx:
    image: nginx:alpine
    container_name: ecoride-nginx
    ports:
      - "443:443"
      - "80:80"
    volumes:
      - ./docker/nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./docker/nginx/ssl:/etc/nginx/ssl
    depends_on:
      - app
    networks:
      - ecoride-network
    restart: unless-stopped

volumes:
  mysql_data:
    driver: local

networks:
  ecoride-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16
